<?xml version="1.0"?>
<!DOCTYPE tsung SYSTEM "/usr/share/tsung/tsung-1.0.dtd">
<tsung loglevel="notice" version="1.0">

  <!--
	用户产生的方式: 
		host必须是主机名称,不能是IP地址 所配置的主机必须要能ssh免密登录
		1.7 版本之前 host必须是主机名称,不能是IP地址 1.7版本后可以是ip
		tsung运行时可以由很多的虚拟机（VM）组成，client配置指明这个client机器上最多生成的用户数，use_controller_vm为true时，当用户量增加到maxusers时，就是终止程序，当为false时，当用户量增加到maxusers时，会重新创建一个虚拟机，然后继续在新虚拟机上运行脚本 。（若主机为单核，请设置use_controller_vm为true）
  -->
  <clients>
    <client host="localhost" use_controller_vm="false" />
  </clients>
  
  <!-- 
	server段可以配置被测服务器的相关信息，也可以配置成集群。
		host: ip
		port：端口
		type：协议类型
  -->
<servers>
  <server host="13.237.205.143" port="8080" type="tcp"></server>
</servers>

  <!-- to start os monitoring (cpu, network, memory). Use an erlang
  agent on the remote machine or SNMP. erlang is the default --> 
  <!--
	监控(cpu, network, memory). 
	使用erlang或SNMP，erlang是默认值，但是要保证监控的机器和server可以互相访问，装有erlang，否则用snmp
	localhost 必须y要能ssh免密登录
	tsung_controller主节点会被强制启用监控
  -->
  <!-- <monitoring>
    <monitor host="localhost" type="erlang"> </monitor>
  </monitoring> -->
  
  <!--
  load用来定义测试压力，用户增长速度以及上限，测试时长等。可以使用多个arrivalphase，每个phase代表一个阶段，每个阶段内可以定义不同的压力，以及要执行的session等
		负载场景设置: 
		phase：阶段，填数字即可，系统会按顺序执行，可以设置多个阶段组合场景
		duration：持续时段，填数字即可，单位是unit="minute"，是分钟,也可设置小时，天，详细情况参考API
		arrivalrate：虚拟用户数，填写数字即可，一般最大800，如果机器配置好，可自己调试最佳参数,有效单位unit="second"是秒，每秒虚拟300个虚拟用户，实际执行情况可能超过，也可能达不到，需要根据调试得到最佳参数
		interarrival: 时间间隔 默认是2秒产生一个用户 这个选项可以和arrivalrate互相调换
		maxnumber: 这个是设置最大用户数,所产生的总用户数不会超过这个
		session_setup: 重写特定阶段中会话的概率设置
  -->
  <load>
  <!-- several arrival phases can be set: for each phase, you can set
  the mean inter-arrival time between new clients and the phase
  duration -->
   <arrivalphase phase="1" duration="8" unit="minute">
     <session_setup name="read-list"        probability="100"/>
     <users maxnumber="1000" interarrival="0.002" unit="second"></users>
   </arrivalphase>
   <!-- <arrivalphase phase="1" duration="15" unit="minute">
     <session_setup name="campaign-add"        probability="100"/>
     <users maxnumber="1000" interarrival="0.002" unit="second"></users>
   </arrivalphase> -->

  </load>

 <!-- 
	options段可配置一些请求的信息，以及全局的配置
	全局变量的默认值可以在这儿进行设定
	比如：场景中两次请求间的思考时间(thinktime)，ssl加密算法，tcp/udp缓存大小(默认是32KB)等
 -->
  <options>
    <option name="connect_timeout" value="5000"></option>
  </options>

  <!-- start a session for a http user. the probability is the
  frequency of this type os session. The sum of all session's
  probabilities must be 100 -->

<!-- 
	sessions内可以定义多个session，每个session内定义一系列http请求动作。
	每个用户只能运行一个session，多个session会在加载用户的时候分别得到执行，session里的request按顺序执行。
	可配置多个子session，进而可测试多个api,可以设置请求概率，在probability里定义,要求每个session的probability之和是100，类型是http
	思考时间：thinktime可用于定义两个请求的间隔时间，单位秒，随机思考时间是以value为基准的指数分布，也可以使用范围的控制
	transaction: 事务
	match: 检查服务器响应
	subst = "true" 表示启用动态参数，可以进行动态替换
	通过%%_变量名%%，我们能够在url中直接使用动态变量。
-->

 <sessions>
  <session name="read-list" probability="0" type="ts_http">

    <!-- full url with server name, this overrides the "server" config value -->
    <transaction name="login_read_list">
      <request subst="true">
       <!--  <match do='continue' when='match' skip_headers='http'>200</match> -->
        <dyn_variable name="access_token" jsonpath="$.data.accessToken"/>
        <http url="/api/sys/oauth/login" method="POST" version="1.1" contents="{&quot;account&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;111111&quot;,&quot;autoLogin&quot;:true,&quot;type&quot;:&quot;account&quot;}">
            <http_header name="Content-Type" value="application/json"/>
        </http>
      </request>
      <thinktime value="2" random="true"></thinktime>
      <request subst="true" >
        <http url="/api/read/readRrs" method="GET" version="1.1" >
            <http_header name="Content-Type" value="application/json"/>
            <http_header name="Authorization" value="Bearer %%_access_token%%"/>
        </http>
      </request>
      
    </transaction>
  </session>
  
  <session name="campaign-add" probability="0" type="ts_http">
	<!-- 动态变量可以是随机字符串 -->
    <setdynvars sourcetype="random_string" length="13">
      <var name="rndstring" />
    </setdynvars>
    <!-- full url with server name, this overrides the "server" config value -->
    <transaction name="login_campaign_add">
      <request subst="true">
       <!--  <match do='continue' when='match' skip_headers='http'>200</match> -->
        <dyn_variable name="access_token" jsonpath="$.data.accessToken"/>
        <http url="/api/sys/oauth/login" method="POST" version="1.1" contents="{&quot;account&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;111111&quot;,&quot;autoLogin&quot;:true,&quot;type&quot;:&quot;account&quot;}">
            <http_header name="Content-Type" value="application/json"/>
        </http>
      </request>
      <request subst="true" >
        <http url="/api/sales/campaigns" method="POST" version="1.1" contents="{&quot;name&quot;:&quot;tsung%%_rndstring%%&quot;,&quot;desc&quot;:&quot;tsung%%_rndstring%%&quot;,&quot;campaignNum&quot;:&quot;TN%%_rndstring%%&quot;,&quot;startTime&quot;:&quot;18/10/2019&quot;,&quot;endTime&quot;:&quot;20/10/2019&quot;}" >
            <http_header name="Content-Type" value="application/json"/>
            <http_header name="Authorization" value="Bearer %%_access_token%%"/>
        </http>
      </request>

    </transaction>
  </session>

 </sessions>

</tsung>
